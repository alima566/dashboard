<%- include('../blocks/header', {bot, user, path, creator}) %>
<div class="container">
    <h2>Member List</h2>
    <div class="row" style="margin-top: 25px;">
        <div class="col-6">
            <form class="form-inline">

                <label class="mr-sm-2" for="show-members">Show</label>
                <select class="custom-select mb-2 mr-sm-2 mb-sm-0 form-control-sm" id="show-members">
                    <option value="50">50</option>
                    <option value="100">100</option>
                    <option value="250">250</option>
                </select>
                <label class="mr-sm-2" for="sort-by">Sort</label>
                <select class="custom-select mb-2 mr-sm-2 mb-sm-0 form-control-sm" id="sort-by">
                    <option value="displayName">Name</option>
                    <option value="joinedTimestamp">Join</option>
                    <option value="id">ID</option>
                </select>
                <label class="sr-only" for="display-name-search">Display Name Search</label>
                <div class="input-group">
                    <div class="input-group-addon fa fa-search"></div>
                    <input type="text" class="form-control form-control-sm" id="display-name-search"
                        placeholder="Display Name">
                </div>
            </form>
        </div>
        <div class="col-6">
            <nav aria-label="Member Navigation">
                <ul class="pagination pagination-sm justify-content-end">
                </ul>
            </nav>
        </div>
    </div>
</div>

<table class="table table-hover table-bordered">
    <thead class="thead-default">
        <tr>
            <th>Display Name:</th>
            <th>User Tag:</th>
            <th>Joined:</th>
            <th>Roles:</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

<script type="text/javascript">
    const guildID = "<%= guild.id %>";
    const pages = {
        total: null,
        current: null,
        elements: null,
        limit: 50,
        sortby: null,
        inverted: false,
        filter: null
    };
    
    const hexToRgb = (hex) => {
        const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16)
        } : null;
    }

    const getMembers = (start, callback) => {
        $.getJSON(`/dashboard/${guildID}/members/list?start=${start}&limit=${pages.limit}&sortby=${pages.sortby}&filter=${pages.filter}`, (response) => {
            pages.total = response.pageof;
            pages.current = response.page;
            pages.elements = response.total;
            callback(response);
        });
    }

    const updateTable = (members) => {
        $("table tbody").empty();
        for (let i = 0; i < members.length; i++) {
            member = members[i];
            let color = member.highestRole.hexColor === "#000000" ? '#FFFFFF' : member.highestRole.hexColor;
            let roles = member.roles.filter(r => r.name !== "@everyone").map(r => {
                let rc = r.hexColor === "#000000" ? { r: 255, g: 255, b: 255 } : hexToRgb(r.hexColor);
                return `<span class="roleBox" style="color: rgb(${rc.r}, ${rc.g}, ${rc.b}); background-color: rgba(${rc.r}, ${rc.g}, ${rc.b}, 0.0980392); border: 1px solid rgba(${rc.r}, ${rc.g}, ${rc.b}, 0.498039);">${r.name}</span>`;
            }).join(" ");
            let thishtml = snippet
                .replace(/\{color\}/g, color)
                .replace("{displayName}", member.displayName)
                .replace("{status}", member.status)
                .replace("{tag}", member.tag)
                .replace("{id}", member.id)
                .replace("{joined}", moment(member.joinedAt).format("MMMM Do YYYY, h:mm a"))
                .replace("{roles}", roles);
            thishtml = member.bot ? thishtml.replace("{botimg}", ' <img src="/public/bot.png">') : thishtml.replace("{botimg}", '');
            $('table > tbody').append(thishtml);
        };
    }

    const changePage = (page) => {
        const start = page * pages.limit;
        pages.current = page;
        getMembers(start, (data) => {
            updateTable(data.members);
        })
    }

    const drawPagination = () => {
        $('.pagination').empty();
        $('.pagination').append('<li class="page-item active"><a class="page-link" href="#" data-pagenum="1">1</a></li>')
        for (let i = 1; i < pages.total; i++) {
            let strItem = '<li class="page-item"><a class="page-link" href="#" data-pagenum="' + (i + 1) + '">' + (i + 1) + '</a></li>';
            $('.pagination').append(strItem);
        }
        $('.page-link').click((e) => {
            e.preventDefault();
            $(this).parent().addClass('active');
            $('.pagination').find('.active').removeClass('active');
            changePage($(this).attr('data-pagenum'));
            return false;
        });
    }
    const snippet = `    <tr>
      <td style="color:{color}"><span class="status {status}"></span> {displayName}{botimg}</td>
      <td style="color:{color}">{tag}<br/>{id}</td>
      <td style="color:{color}">{joined}</td>
      <td>{roles}</td>
    </tr>`;
    const roleSnippet = '<span style="color:{color}">{name}</span>';

    $(document).ready(() => {
        getMembers(0, (data) => {
            pages.current = data.page;
            updateTable(data.members);
            drawPagination();
        });
    });

    $("#show-members").change(() => {
        pages.limit = this.value;
        getMembers(0, (data)=> {
            updateTable(data.members);
            drawPagination();
        });
    });

    $("#sort-by").change(() => {
        pages.sortby = this.value;
        getMembers(pages.current, (data) => {
            updateTable(data.members);
            drawPagination();
        });
    });

    let typingTimer;                //timer identifier
    let doneTypingInterval = 1000;  //time in ms (5 seconds)
    $('#display-name-search').keyup(() => {
        clearTimeout(typingTimer);
        pages.filter = $('#display-name-search').val() ? $('#display-name-search').val() : null
        typingTimer = setTimeout(doneTyping, doneTypingInterval);
    });

    const doneTyping = () => {
        getMembers(0, (data) => {
            updateTable(data.members);
            drawPagination();
        });
    }
</script>
<%- include('../blocks/footer', {bot, user, path, creator}) %>